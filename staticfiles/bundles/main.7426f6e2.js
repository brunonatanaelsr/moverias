document.addEventListener('alpine:init', () => {Alpine.data('globalState', () => ({darkMode: localStorage.getItem('darkMode') === 'true', mobileMenuOpen: false, loading: false, toasts: [], formData: {}, formErrors: {}, toggleDarkMode() {this.darkMode = !this.darkMode;localStorage.setItem('darkMode', this.darkMode);if (this.darkMode) {document.documentElement.classList.add('dark');}else {document.documentElement.classList.remove('dark');}}, showToast(message, type = 'info', duration = 5000) {const id = Date.now();const toast = {id, message, type, visible: true };this.toasts.push(toast);setTimeout(() => {this.hideToast(id);}, duration);}, hideToast(id) {const index = this.toasts.findIndex(toast => toast.id === id);if (index > -1) {this.toasts[index].visible = false;setTimeout(() => {this.toasts.splice(index, 1);}, 300);}}, setLoading(state) {this.loading = state;}, submitForm(formElement, options = {}) {this.setLoading(true);this.formErrors = {};const formData = new FormData(formElement);const csrfToken = document.querySelector('[name=csrfmiddlewaretoken]');if (csrfToken) {formData.append('csrfmiddlewaretoken', csrfToken.value);}fetch(formElement.action || window.location.href, {method: formElement.method || 'POST', body: formData, headers: {'X-Requested-With': 'XMLHttpRequest', }}) .then(response => response.json()) .then(data => {if (data.success) {this.showToast(data.message || 'Operação realizada com sucesso!', 'success');if (data.redirect) {setTimeout(() => {window.location.href = data.redirect;}, 1000);}if (options.resetOnSuccess) {formElement.reset();}}else {if (data.errors) {this.formErrors = data.errors;}this.showToast(data.message || 'Erro ao processar formulário', 'error');}}) .catch(error => {console.error('Form submission error:', error);this.showToast('Erro interno do servidor', 'error');}) .finally(() => {this.setLoading(false);});}}));Alpine.data('sidebar', () => ({open: false, toggle() {this.open = !this.open;}, close() {this.open = false;}}));Alpine.data('modal', (initialState = false) => ({open: initialState, show() {this.open = true;document.body.classList.add('overflow-hidden');}, hide() {this.open = false;document.body.classList.remove('overflow-hidden');}, toggle() {if (this.open) {this.hide();}else {this.show();}}}));Alpine.data('dropdown', () => ({open: false, toggle() {this.open = !this.open;}, close() {this.open = false;}}));Alpine.data('tabs', (defaultTab = 0) => ({activeTab: defaultTab, setActiveTab(index) {this.activeTab = index;}, isActive(index) {return this.activeTab === index;}}));Alpine.data('formValidation', () => ({errors: {}, touched: {}, validate(fieldName, value, rules) {const fieldErrors = [];if (rules.required && (!value || value.trim() === '')) {fieldErrors.push('Este campo é obrigatório');}if (rules.email && value && !this.isValidEmail(value)) {fieldErrors.push('Email inválido');}if (rules.minLength && value && value.length < rules.minLength) {fieldErrors.push(`Mínimo de ${rules.minLength}caracteres`);}if (rules.maxLength && value && value.length > rules.maxLength) {fieldErrors.push(`Máximo de ${rules.maxLength}caracteres`);}if (rules.pattern && value && !new RegExp(rules.pattern).test(value)) {fieldErrors.push('Formato inválido');}this.errors[fieldName] = fieldErrors;this.touched[fieldName] = true;return fieldErrors.length === 0;}, isValidEmail(email) {const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;return emailRegex.test(email);}, hasError(fieldName) {return this.errors[fieldName] && this.errors[fieldName].length > 0;}, getErrors(fieldName) {return this.errors[fieldName] || [];}, isValid() {return Object.values(this.errors).every(errors => errors.length === 0);}}));});document.addEventListener('DOMContentLoaded', () => {if (localStorage.getItem('darkMode') === 'true') {document.documentElement.classList.add('dark');}document.querySelectorAll('.mm-alert-dismissible').forEach(alert => {setTimeout(() => {const closeBtn = alert.querySelector('.mm-alert-dismiss');if (closeBtn) {closeBtn.click();}}, 5000);});document.querySelectorAll('[data-tooltip]').forEach(element => {element.addEventListener('mouseenter', (e) => {const tooltip = document.createElement('div');tooltip.className = 'mm-tooltip';tooltip.textContent = e.target.dataset.tooltip;document.body.appendChild(tooltip);const rect = e.target.getBoundingClientRect();tooltip.style.top = `${rect.top - tooltip.offsetHeight - 10}px`;tooltip.style.left = `${rect.left + (rect.width - tooltip.offsetWidth) / 2}px`;});element.addEventListener('mouseleave', () => {document.querySelectorAll('.mm-tooltip').forEach(tooltip => {tooltip.remove();});});});console.log('Alpine.js setup complete');});class DarkModeManager {constructor() {this.darkMode = localStorage.getItem('darkMode') === 'true';this.init();}init() {this.applyTheme();const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');mediaQuery.addEventListener('change', (e) => {if (!localStorage.getItem('darkMode')) {this.darkMode = e.matches;this.applyTheme();}});this.createToggleButton();}applyTheme() {const html = document.documentElement;if (this.darkMode) {html.classList.add('dark');html.setAttribute('data-theme', 'dark');}else {html.classList.remove('dark');html.setAttribute('data-theme', 'light');}const metaThemeColor = document.querySelector('meta[name="theme-color"]');if (metaThemeColor) {metaThemeColor.content = this.darkMode ? '#1f2937' : '#ffffff';}window.dispatchEvent(new CustomEvent('themechange', {detail: {darkMode: this.darkMode }}));}toggle() {this.darkMode = !this.darkMode;localStorage.setItem('darkMode', this.darkMode);this.applyTheme();if (window.Alpine && window.Alpine.store) {const message = this.darkMode ? 'Modo escuro ativado' : 'Modo claro ativado';window.Alpine.store('global').showToast(message, 'info', 2000);}}createToggleButton() {const existingButton = document.querySelector('[data-dark-mode-toggle]');if (existingButton) {existingButton.addEventListener('click', () => this.toggle());return;}const button = document.createElement('button');button.className = 'fixed bottom-4 right-4 w-12 h-12 bg-gray-800 dark:bg-gray-200 text-white dark:text-gray-800 rounded-full shadow-lg hover:shadow-xl transition-all duration-200 z-50 flex items-center justify-center';button.innerHTML = ` <i class="fas fa-sun dark:hidden"></i> <i class="fas fa-moon hidden dark:block"></i> `;button.setAttribute('data-dark-mode-toggle', '');button.setAttribute('aria-label', 'Alternar modo escuro/claro');button.addEventListener('click', () => this.toggle());document.body.appendChild(button);}isDarkMode() {return this.darkMode;}setDarkMode(enabled) {this.darkMode = enabled;localStorage.setItem('darkMode', enabled);this.applyTheme();}getSystemPreference() {return window.matchMedia('(prefers-color-scheme: dark)').matches;}}const darkModeManager = new DarkModeManager();window.toggleDarkMode = () => darkModeManager.toggle();window.setDarkMode = (enabled) => darkModeManager.setDarkMode(enabled);window.isDarkMode = () => darkModeManager.isDarkMode();document.addEventListener('DOMContentLoaded', () => {const themeImages = document.querySelectorAll('[data-theme-src]');function updateThemeImages() {themeImages.forEach(img => {const lightSrc = img.dataset.lightSrc;const darkSrc = img.dataset.darkSrc;if (lightSrc && darkSrc) {img.src = darkModeManager.isDarkMode() ? darkSrc : lightSrc;}});}window.addEventListener('themechange', updateThemeImages);updateThemeImages();});document.addEventListener('DOMContentLoaded', () => {const root = document.documentElement;function updateCSSVariables() {if (darkModeManager.isDarkMode()) {root.style.setProperty('--bg-primary', '#1f2937');root.style.setProperty('--bg-secondary', '#374151');root.style.setProperty('--text-primary', '#f9fafb');root.style.setProperty('--text-secondary', '#d1d5db');root.style.setProperty('--border-color', '#4b5563');}else {root.style.setProperty('--bg-primary', '#ffffff');root.style.setProperty('--bg-secondary', '#f9fafb');root.style.setProperty('--text-primary', '#111827');root.style.setProperty('--text-secondary', '#6b7280');root.style.setProperty('--border-color', '#e5e7eb');}}window.addEventListener('themechange', updateCSSVariables);updateCSSVariables();});console.log('Dark mode system initialized');class ToastManager {constructor() {this.toasts = [];this.container = null;this.init();}init() {this.createContainer();this.processDjangoMessages();this.setupHTMXListeners();}createContainer() {this.container = document.getElementById('toast-container');if (!this.container) {this.container = document.createElement('div');this.container.id = 'toast-container';this.container.className = 'fixed top-4 right-4 z-50 space-y-2 max-w-sm';document.body.appendChild(this.container);}}show(message, type = 'info', duration = 5000, options = {}) {const id = Date.now() + Math.random();const toast = {id, message, type, duration, options, element: null };toast.element = this.createElement(toast);this.container.appendChild(toast.element);this.toasts.push(toast);requestAnimationFrame(() => {toast.element.classList.add('mm-toast-show');});if (duration > 0) {setTimeout(() => {this.hide(id);}, duration);}if (this.toasts.length > 5) {this.hide(this.toasts[0].id);}return id;}createElement(toast) {const element = document.createElement('div');element.className = `mm-toast mm-toast-${toast.type}mm-toast-enter`;element.setAttribute('data-toast-id', toast.id);const icon = this.getIcon(toast.type);const actions = toast.options.actions || [];element.innerHTML = ` <div class="flex items-start"> <div class="flex-shrink-0"> <i class="${icon}${this.getIconColor(toast.type)}"></i> </div> <div class="ml-3 flex-1"> ${toast.options.title ? `<h4 class="text-sm font-medium">${toast.options.title}</h4>` : ''}<div class="text-sm ${toast.options.title ? 'mt-1' : ''}"> ${message}</div> ${actions.length > 0 ? this.createActions(actions) : ''}</div> <div class="ml-4 flex-shrink-0"> <button type="button" class="mm-toast-close" onclick="toastManager.hide(${toast.id})"> <span class="sr-only">Fechar</span> <i class="fas fa-times w-4 h-4"></i> </button> </div> </div> `;return element;}createActions(actions) {const actionsHtml = actions.map(action => {const onclick = action.onclick || `toastManager.handleAction('${action.id}')`;return `<button type="button" class="mm-toast-action" onclick="${onclick}">${action.text}</button>`;}).join('');return `<div class="mt-3 flex space-x-2">${actionsHtml}</div>`;}getIcon(type) {switch (type) {case 'success': return 'fas fa-check-circle';case 'error': return 'fas fa-exclamation-circle';case 'warning': return 'fas fa-exclamation-triangle';case 'info': return 'fas fa-info-circle';default: return 'fas fa-info-circle';}}getIconColor(type) {switch (type) {case 'success': return 'text-green-500';case 'error': return 'text-red-500';case 'warning': return 'text-yellow-500';case 'info': return 'text-blue-500';default: return 'text-blue-500';}}hide(id) {const toast = this.toasts.find(t => t.id === id);if (!toast) return;toast.element.classList.add('mm-toast-exit');setTimeout(() => {if (toast.element.parentNode) {toast.element.parentNode.removeChild(toast.element);}this.toasts = this.toasts.filter(t => t.id !== id);}, 300);}hideAll() {this.toasts.forEach(toast => {this.hide(toast.id);});}processDjangoMessages() {const messages = document.querySelectorAll('.django-message');messages.forEach(message => {const type = message.dataset.type || 'info';const text = message.textContent.trim();if (text) {this.show(text, type);}message.remove();});}setupHTMXListeners() {document.addEventListener('htmx:responseError', (e) => {this.show('Erro na requisição', 'error');});document.addEventListener('htmx:sendError', (e) => {this.show('Erro de conexão', 'error');});document.addEventListener('htmx:afterSwap', (e) => {this.processDjangoMessages();});}handleAction(actionId) {const event = new CustomEvent('toastAction', {detail: {actionId }});document.dispatchEvent(event);}success(message, options = {}) {return this.show(message, 'success', 4000, options);}error(message, options = {}) {return this.show(message, 'error', 6000, options);}warning(message, options = {}) {return this.show(message, 'warning', 5000, options);}info(message, options = {}) {return this.show(message, 'info', 4000, options);}loading(message, options = {}) {return this.show(message, 'info', 0, {...options, title: 'Carregando...' });}}const toastManager = new ToastManager();window.showToast = (message, type, duration, options) => {return toastManager.show(message, type, duration, options);};window.hideToast = (id) => {toastManager.hide(id);};window.hideAllToasts = () => {toastManager.hideAll();};window.toast = {success: (message, options) => toastManager.success(message, options), error: (message, options) => toastManager.error(message, options), warning: (message, options) => toastManager.warning(message, options), info: (message, options) => toastManager.info(message, options), loading: (message, options) => toastManager.loading(message, options) };document.addEventListener('DOMContentLoaded', () => {toastManager.processDjangoMessages();console.log('Toast notification system initialized');});if (typeof module !== 'undefined' && module.exports) {module.exports = ToastManager;}