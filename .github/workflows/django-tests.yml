name: Django CI/CD Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: move_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-django pytest-cov pytest-xdist psycopg2-binary
    
    - name: Set up environment variables
      run: |
        echo "DJANGO_SETTINGS_MODULE=movemarias.settings" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci-cd-only-not-for-production" >> $GITHUB_ENV
        echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/move_test" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "DEBUG=False" >> $GITHUB_ENV
        echo "ENVIRONMENT=testing" >> $GITHUB_ENV
    
    - name: Run Django system checks
      run: |
        python manage.py check
        python manage.py check --deploy
    
    - name: Run migrations
      run: |
        python manage.py migrate
    
    - name: Run unit tests
      run: |
        python -m pytest tests/test_models.py tests/test_forms.py -v --tb=short
    
    - name: Run integration tests
      run: |
        python -m pytest tests/test_views.py tests/test_auth.py -v --tb=short
    
    - name: Run security tests
      run: |
        python -m pytest tests/test_security.py -v --tb=short
    
    - name: Run performance tests (fast only)
      run: |
        python -m pytest tests/test_performance.py -v --tb=short -m "not slow"
    
    - name: Run smoke tests
      run: |
        python -m pytest tests/test_smoke.py -v --tb=short
    
    - name: Generate coverage report
      run: |
        python -m pytest --cov=. --cov-report=xml --cov-report=html --cov-exclude="*/migrations/*" --cov-exclude="*/venv/*" --cov-exclude="manage.py"
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
          pytest.xml
    
    - name: Security scan with bandit
      run: |
        pip install bandit
        bandit -r . -x tests/ || true
    
    - name: Check for security vulnerabilities
      run: |
        pip install safety
        safety check || true

  deploy-check:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Check deployment readiness
      run: |
        echo "DJANGO_SETTINGS_MODULE=movemarias.settings" >> $GITHUB_ENV
        echo "SECRET_KEY=production-ready-secret-key-placeholder" >> $GITHUB_ENV
        echo "DEBUG=False" >> $GITHUB_ENV
        echo "ENVIRONMENT=production" >> $GITHUB_ENV
        echo "ALLOWED_HOSTS=move.squadsolucoes.com.br,www.move.squadsolucoes.com.br" >> $GITHUB_ENV
        
        python manage.py check --deploy
    
    - name: Collect static files
      run: |
        python manage.py collectstatic --noinput
    
    - name: Run production smoke tests
      run: |
        python -m pytest tests/test_smoke.py::TestDeploymentChecks -v

  notification:
    runs-on: ubuntu-latest
    needs: [test, deploy-check]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.test.result == 'success' && needs.deploy-check.result == 'success'
      run: |
        echo "✅ All tests passed! Ready for deployment."
    
    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.deploy-check.result == 'failure'
      run: |
        echo "❌ Tests failed! Check the logs for details."
        exit 1
