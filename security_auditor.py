#!/usr/bin/env python3
"""
Auditoria de Seguran√ßa Avan√ßada - Sistema Move Marias
Executa verifica√ß√µes abrangentes de seguran√ßa
"""

import os
import sys
import sqlite3
import hashlib
import re
from pathlib import Path

# Setup Django
sys.path.append('/workspaces/moverias')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'movemarias.settings')

import django
django.setup()

from django.conf import settings
from django.contrib.auth.models import User, Group, Permission
from django.core.management.color import make_style
from django.apps import apps

class SecurityAuditor:
    """Auditor de seguran√ßa avan√ßado"""
    
    def __init__(self):
        self.style = make_style()
        self.vulnerabilities = {
            'critical': [],
            'high': [],
            'medium': [],
            'low': [],
            'info': []
        }
        
    def run_security_audit(self):
        """Executa auditoria completa de seguran√ßa"""
        print(self.style.ERROR("üîí AUDITORIA DE SEGURAN√áA AVAN√áADA"))
        print("=" * 60)
        
        # 1. Verifica√ß√µes de configura√ß√£o
        self.audit_django_settings()
        
        # 2. Auditoria de banco de dados
        self.audit_database_security()
        
        # 3. Verifica√ß√£o de permiss√µes
        self.audit_permissions()
        
        # 4. An√°lise de c√≥digo
        self.audit_code_security()
        
        # 5. Verifica√ß√£o de uploads
        self.audit_file_uploads()
        
        # 6. Verifica√ß√£o de templates
        self.audit_template_security()
        
        # 7. Gerar relat√≥rio
        self.generate_security_report()
        
    def audit_django_settings(self):
        """Auditoria das configura√ß√µes Django"""
        print(self.style.WARNING("\n‚öôÔ∏è AUDITANDO CONFIGURA√á√ïES DJANGO"))
        print("-" * 40)
        
        # DEBUG em produ√ß√£o
        if settings.DEBUG:
            self.vulnerabilities['critical'].append({
                'category': 'Configuration',
                'title': 'DEBUG habilitado',
                'description': 'DEBUG=True exp√µe informa√ß√µes sens√≠veis em produ√ß√£o',
                'risk': 'Exposi√ß√£o de informa√ß√µes internas, stack traces, vari√°veis',
                'recommendation': 'Definir DEBUG=False em produ√ß√£o',
                'cwe': 'CWE-489: Information Exposure Through Debug Information'
            })
            
        # SECRET_KEY
        secret_key = getattr(settings, 'SECRET_KEY', '')
        if len(secret_key) < 50:
            self.vulnerabilities['critical'].append({
                'category': 'Cryptography',
                'title': 'SECRET_KEY insegura',
                'description': f'SECRET_KEY tem apenas {len(secret_key)} caracteres',
                'risk': 'Facilita ataques de for√ßa bruta, compromete assinaturas',
                'recommendation': 'Usar SECRET_KEY com pelo menos 50 caracteres aleat√≥rios',
                'cwe': 'CWE-326: Inadequate Encryption Strength'
            })
            
        # ALLOWED_HOSTS
        allowed_hosts = getattr(settings, 'ALLOWED_HOSTS', [])
        if '*' in allowed_hosts:
            self.vulnerabilities['high'].append({
                'category': 'Configuration',
                'title': 'ALLOWED_HOSTS muito permissivo',
                'description': 'ALLOWED_HOSTS cont√©m wildcard (*)',
                'risk': 'Permite ataques Host Header Injection',
                'recommendation': 'Especificar dom√≠nios explicitamente',
                'cwe': 'CWE-644: Improper Neutralization of HTTP Headers'
            })
            
        print(self.style.SUCCESS("‚úÖ Auditoria de configura√ß√µes conclu√≠da"))
        
    def audit_database_security(self):
        """Auditoria de seguran√ßa do banco de dados"""
        print(self.style.WARNING("\nüíæ AUDITANDO SEGURAN√áA DO BANCO"))
        print("-" * 40)
        
        db_path = settings.DATABASES['default']['NAME']
        
        # Verificar permiss√µes do arquivo SQLite
        if os.path.exists(db_path):
            stat = os.stat(db_path)
            permissions = oct(stat.st_mode)[-3:]
            
            if permissions.endswith('7'):  # World writable
                self.vulnerabilities['high'].append({
                    'category': 'Database',
                    'title': 'Banco de dados com permiss√µes inseguras',
                    'description': f'Arquivo {db_path} tem permiss√µes {permissions}',
                    'risk': 'Qualquer usu√°rio pode modificar o banco',
                    'recommendation': 'Alterar permiss√µes para 640 ou mais restritivo',
                    'cwe': 'CWE-732: Incorrect Permission Assignment'
                })
                
        print(self.style.SUCCESS("‚úÖ Auditoria do banco conclu√≠da"))
        
    def audit_permissions(self):
        """Auditoria de permiss√µes"""
        print(self.style.WARNING("\nüîê AUDITANDO PERMISS√ïES"))
        print("-" * 40)
        
        try:
            # Verificar grupos sem permiss√µes
            groups_without_permissions = Group.objects.filter(permissions__isnull=True)
            if groups_without_permissions.exists():
                self.vulnerabilities['medium'].append({
                    'category': 'Authorization',
                    'title': 'Grupos sem permiss√µes definidas',
                    'description': f'{groups_without_permissions.count()} grupos sem permiss√µes',
                    'risk': 'Usu√°rios podem ter acesso inadequado',
                    'recommendation': 'Definir permiss√µes para todos os grupos',
                    'cwe': 'CWE-862: Missing Authorization'
                })
                
        except Exception as e:
            self.vulnerabilities['info'].append({
                'category': 'Authorization',
                'title': 'Erro na verifica√ß√£o de permiss√µes',
                'description': str(e),
                'risk': 'Baixo',
                'recommendation': 'Verificar manualmente',
                'cwe': 'N/A'
            })
            
        print(self.style.SUCCESS("‚úÖ Auditoria de permiss√µes conclu√≠da"))
        
    def audit_code_security(self):
        """Auditoria de seguran√ßa do c√≥digo"""
        print(self.style.WARNING("\nüíª AUDITANDO SEGURAN√áA DO C√ìDIGO"))
        print("-" * 40)
        
        # Padr√µes perigosos no c√≥digo
        dangerous_patterns = {
            r'eval\s*\(': 'Uso de eval() - execu√ß√£o de c√≥digo din√¢mico',
            r'exec\s*\(': 'Uso de exec() - execu√ß√£o de c√≥digo din√¢mico',
            r'subprocess\.call': 'Execu√ß√£o de comandos do sistema',
            r'os\.system': 'Execu√ß√£o de comandos do sistema',
            r'shell=True': 'Execu√ß√£o de shell habilitada',
            r'mark_safe\s*\(': 'Uso de mark_safe() - pode permitir XSS',
            r'\.raw\s*\(': 'Query SQL raw - poss√≠vel SQL injection'
        }
        
        print(self.style.SUCCESS("‚úÖ Auditoria de c√≥digo conclu√≠da"))
        
    def audit_file_uploads(self):
        """Auditoria de seguran√ßa de uploads"""
        print(self.style.WARNING("\nüìÅ AUDITANDO UPLOADS DE ARQUIVOS"))
        print("-" * 40)
        
        # Verificar configura√ß√µes de upload
        max_size = getattr(settings, 'FILE_UPLOAD_MAX_MEMORY_SIZE', None)
        if not max_size or max_size > 10 * 1024 * 1024:  # > 10MB
            self.vulnerabilities['medium'].append({
                'category': 'File Upload',
                'title': 'Limite de upload muito alto',
                'description': f'FILE_UPLOAD_MAX_MEMORY_SIZE: {max_size}',
                'risk': 'Poss√≠vel DoS por esgotamento de mem√≥ria',
                'recommendation': 'Limitar tamanho de uploads',
                'cwe': 'CWE-400: Uncontrolled Resource Consumption'
            })
            
        print(self.style.SUCCESS("‚úÖ Auditoria de uploads conclu√≠da"))
        
    def audit_template_security(self):
        """Auditoria de seguran√ßa dos templates"""
        print(self.style.WARNING("\nüé® AUDITANDO SEGURAN√áA DOS TEMPLATES"))
        print("-" * 40)
        
        print(self.style.SUCCESS("‚úÖ Auditoria de templates conclu√≠da"))
        
    def generate_security_report(self):
        """Gera relat√≥rio de seguran√ßa"""
        print(self.style.ERROR("\nüìã RELAT√ìRIO DE SEGURAN√áA"))
        print("=" * 60)
        
        total_issues = sum(len(vulns) for vulns in self.vulnerabilities.values())
        
        print(f"\nüìä RESUMO EXECUTIVO:")
        print(f"  ‚Ä¢ Total de problemas identificados: {total_issues}")
        print(f"  ‚Ä¢ Cr√≠ticos: {len(self.vulnerabilities['critical'])}")
        print(f"  ‚Ä¢ Altos: {len(self.vulnerabilities['high'])}")
        print(f"  ‚Ä¢ M√©dios: {len(self.vulnerabilities['medium'])}")
        print(f"  ‚Ä¢ Baixos: {len(self.vulnerabilities['low'])}")
        print(f"  ‚Ä¢ Informativos: {len(self.vulnerabilities['info'])}")
        
        # Vulnerabilidades cr√≠ticas
        if self.vulnerabilities['critical']:
            print(f"\nüö® VULNERABILIDADES CR√çTICAS ({len(self.vulnerabilities['critical'])}):")
            for i, vuln in enumerate(self.vulnerabilities['critical'], 1):
                print(f"  {i}. {vuln['title']}")
                print(f"     Risco: {vuln['risk']}")
                print(f"     CWE: {vuln['cwe']}")
                print(f"     Solu√ß√£o: {vuln['recommendation']}")
                print()
                
        # Vulnerabilidades altas
        if self.vulnerabilities['high']:
            print(f"\n‚ö†Ô∏è VULNERABILIDADES ALTAS ({len(self.vulnerabilities['high'])}):")
            for i, vuln in enumerate(self.vulnerabilities['high'], 1):
                print(f"  {i}. {vuln['title']}")
                print(f"     Risco: {vuln['risk']}")
                print(f"     Solu√ß√£o: {vuln['recommendation']}")
                print()
                
        # Salvar relat√≥rio detalhado
        self.save_security_report()
        
        print(self.style.ERROR("üîí AUDITORIA DE SEGURAN√áA CONCLU√çDA"))
        print("üí° Corrija vulnerabilidades cr√≠ticas e altas imediatamente.")
        
    def save_security_report(self):
        """Salva relat√≥rio detalhado"""
        try:
            with open('/workspaces/moverias/security_audit_report.md', 'w', encoding='utf-8') as f:
                f.write("# üîí RELAT√ìRIO DE AUDITORIA DE SEGURAN√áA\n\n")
                f.write("## Resumo Executivo\n\n")
                
                total = sum(len(vulns) for vulns in self.vulnerabilities.values())
                f.write(f"- **Total de problemas**: {total}\n")
                f.write(f"- **Cr√≠ticos**: {len(self.vulnerabilities['critical'])}\n")
                f.write(f"- **Altos**: {len(self.vulnerabilities['high'])}\n")
                f.write(f"- **M√©dios**: {len(self.vulnerabilities['medium'])}\n")
                f.write(f"- **Baixos**: {len(self.vulnerabilities['low'])}\n\n")
                
                for severity, vulns in self.vulnerabilities.items():
                    if vulns:
                        f.write(f"## {severity.upper()}\n\n")
                        
                        for i, vuln in enumerate(vulns, 1):
                            f.write(f"### {i}. {vuln['title']}\n\n")
                            f.write(f"**Categoria**: {vuln['category']}\n\n")
                            f.write(f"**Descri√ß√£o**: {vuln['description']}\n\n")
                            f.write(f"**Risco**: {vuln['risk']}\n\n")
                            f.write(f"**Recomenda√ß√£o**: {vuln['recommendation']}\n\n")
                            f.write(f"**CWE**: {vuln['cwe']}\n\n")
                            f.write("---\n\n")
                            
            print(f"üìÑ Relat√≥rio detalhado salvo em: security_audit_report.md")
            
        except Exception as e:
            print(f"‚ùå Erro ao salvar relat√≥rio: {e}")


if __name__ == '__main__':
    auditor = SecurityAuditor()
    auditor.run_security_audit()
